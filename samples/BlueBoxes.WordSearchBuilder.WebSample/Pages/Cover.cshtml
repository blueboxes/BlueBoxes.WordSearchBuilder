@page
@using WordSearchEngine.Models;
@using WordSearchEngine.WordPlacers;
@model CoverModel

@{
    if (Model is null)
        throw new ArgumentNullException(nameof(Model));
}

<style>
/*
     *   #b2a7d2;
            #abd8b7;
            #f8b4a7;
            #ccdbfd;
            #71CFE8;
 */
    .img {
        background-color: #9adbe1;
        width: 2800px;
        height: 2100px;
        overflow: hidden;
        position: relative;
    }

    .page{
        background-color: white;
        box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
        width: 700px;
        margin-left: 700px;
        transform: scale(2);
        transform-origin: 0px 0px;
        z-index: 100;
        height: 1000px;
        position:absolute;
    }

    .offset1{
        transform: scale(2) translateX(25px) translateY(25px);
        position: absolute;
        z-index: 30;
        height:1000px;
        top: 500px;
    }

    .offset2 {
        transform: scale(2) translateX(50px) translateY(50px);
        position: absolute;
        z-index: 20;
        height:1000px;
        top: 525px;
    }

    .call-out{
        position:absolute;
        background-color: #e06767;
        box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px;
        height:400px;
        width: 400px;
        border-radius:200px;

        text-align:center;
        left: 2000px;
        top: 300px;
        z-index: 500; 
        transform: rotate(25deg);
    }

    .call-out-text {
        font-size: 80px;
        padding-top:90px;
        color: white;
        font-family: 'Handlee', cursive;
    }
 

    h1 {
        font-size: 150px;
        font-family: 'Handlee', cursive;
        color: white;
        padding-top: 60px;
    }

    h3 {
        font-size: 65px;
        font-family: 'Handlee', cursive;
        color: white;
        padding-bottom: 30px;
        position: relative;
        top: -50px;
    }
     
    .grid-container {
        display: grid;
        grid-template-columns: repeat(@Model.GridSize, 1fr);
        grid-auto-rows: minmax(0, 1fr);
        position: relative;
    }

    .grid-item {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: @(Model.CellSize - 20)px;
        height: @(Model.CellSize)px;
        width: @(Model.CellSize)px;
    }

    h2 {
        font-size: @(Model.CellSize + (Model.CellSize / 2))px;
        font-family: 'Handlee', cursive;
        color: #282828;
        padding:35px;
    }

    .wordsearch {
        border: 2px solid lightgray;
        border-radius: 15px;
        display: inline-block;
        box-sizing: border-box;
    }
     
    .words-container {
        max-width: @(Model.GridSize * Model.CellSize)px;
        margin: auto;
        padding-top: 40px;
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-auto-rows: minmax(0, 1fr);
        position: relative;
        font-size: @(Model.CellSize / 2)px;
    }

    .words-item {
        display: flex;
        justify-content: left;
        align-items: flex-start;
        padding-bottom: 5px;
    }

 

    body {
        font-family: 'Montserrat', sans-serif;
        text-align: center;
        padding:0px;
        margin:0px;
    }
 
</style>

<div class="img">
    <h1>@Model.SetTitle</h1>
    <h3>Print at home puzzle Pack</h3>

    <div class="call-out"><div class="call-out-text">@Model.PackSize Puzzle Pack</div></div>

    <div class="page">
        @foreach (var puzzle in Model.Puzzles)
{
    <h2>@puzzle.Title</h2>

    <div class="wordsearch">

        <div class="grid-container">
            @{
                for (var y = 0; y < Model?.GridSize; y++)
                {
                    for (var x = 0; x < Model?.GridSize; x++)
                    {
                        <div class="grid-item" data-id="@x,@y">@(puzzle.Puzzle[x][y])</div>
                    }
                }
            }
        </div>
    </div>

    <div class="words-container">
        @foreach (var word in puzzle.Solution ?? new List<PlacedWord>())
        {
            <div class="words-item">⬜ @word.Word</div>
        }
    </div>
    <footer></footer>
    <div class="break"></div>
}

    </div>

    <div class="page offset1"></div>
    <div class="page offset2"></div> 
</div>